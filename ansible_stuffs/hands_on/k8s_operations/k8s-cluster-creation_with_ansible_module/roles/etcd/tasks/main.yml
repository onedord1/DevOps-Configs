- name: Create etcd data directory with proper permissions
  file:
    path: "{{ etcd_data_dir }}"
    state: directory
    mode: '0700'
    owner: root
    group: root
  become: yes
  when: etcd_cluster

- name: Download etcd binary
  get_url:
    url: "https://github.com/etcd-io/etcd/releases/download/v3.5.9/etcd-v3.5.9-linux-amd64.tar.gz"
    dest: /tmp/etcd.tar.gz
  become: yes
  when: etcd_cluster

- name: Extract etcd binary
  unarchive:
    src: /tmp/etcd.tar.gz
    dest: /tmp
    remote_src: yes
  become: yes
  when: etcd_cluster

- name: Copy etcd binary to /usr/local/bin
  copy:
    src: /tmp/etcd-v3.5.9-linux-amd64/etcd
    dest: /usr/local/bin/etcd
    mode: '0755'
    remote_src: yes
  become: yes
  when: etcd_cluster

- name: Copy etcdctl binary to /usr/local/bin
  copy:
    src: /tmp/etcd-v3.5.9-linux-amd64/etcdctl
    dest: /usr/local/bin/etcdctl
    mode: '0755'
    remote_src: yes
  become: yes
  when: etcd_cluster

- name: Clean up etcd archive and extracted files
  file:
    path: "{{ item }}"
    state: absent
  become: yes
  when: etcd_cluster
  loop:
    - /tmp/etcd.tar.gz
    - /tmp/etcd-v3.5.9-linux-amd64

- name: Configure etcd production settings
  block:
    - name: Create etcd configuration directory
      file:
        path: /etc/etcd
        state: directory
        mode: '0700'
      become: yes

    - name: Create etcd configuration file
      template:
        src: etcd.conf.yaml.j2
        dest: /etc/etcd/etcd.conf.yaml
        mode: '0600'
      become: yes

    - name: Generate production-grade etcd certificates
      block:
        - name: Create etcd certificate directory
          file:
            path: /etc/kubernetes/pki/etcd
            state: directory
            mode: '0700'
          become: yes

        - name: Generate etcd CA with stronger encryption
          command: >
            openssl genrsa -out /etc/kubernetes/pki/etcd/ca.key 4096
          become: yes

        - name: Generate etcd CA certificate with longer validity
          command: >
            openssl req -x509 -new -nodes -key /etc/kubernetes/pki/etcd/ca.key
            -days 3650 -out /etc/kubernetes/pki/etcd/ca.crt -subj "/CN=etcd-ca"
          become: yes

        - name: Create OpenSSL config file for etcd server certificate
          copy:
            content: |
              [req]
              req_extensions = v3_req
              distinguished_name = req_distinguished_name
              [req_distinguished_name]
              [ v3_req ]
              basicConstraints = CA:FALSE
              keyUsage = nonRepudiation, digitalSignature, keyEncipherment
              subjectAltName = @alt_names
              [alt_names]
              IP.1 = {{ ansible_host }}
              IP.2 = 127.0.0.1
            dest: /tmp/etcd-openssl.cnf
          become: yes

        - name: Generate etcd server key with stronger encryption
          command: >
            openssl genrsa -out /etc/kubernetes/pki/etcd/server.key 4096
          become: yes

        - name: Generate etcd server certificate with IP SANs
          command: >
            openssl req -new -key /etc/kubernetes/pki/etcd/server.key
            -out /etc/kubernetes/pki/etcd/server.csr -subj "/CN={{ ansible_host }}"
            -config /tmp/etcd-openssl.cnf -extensions v3_req
          become: yes

        - name: Sign etcd server certificate with IP SANs
          command: >
            openssl x509 -req -in /etc/kubernetes/pki/etcd/server.csr
            -CA /etc/kubernetes/pki/etcd/ca.crt -CAkey /etc/kubernetes/pki/etcd/ca.key
            -CAcreateserial -out /etc/kubernetes/pki/etcd/server.crt -days 1825
            -extfile /tmp/etcd-openssl.cnf -extensions v3_req
          become: yes

        - name: Clean up OpenSSL config file
          file:
            path: /tmp/etcd-openssl.cnf
            state: absent
          become: yes
      when: etcd_cluster

- name: Configure etcd systemd service with production settings
  template:
    src: etcd.service.j2
    dest: /etc/systemd/system/etcd.service
    mode: '0644'
  become: yes
  when: etcd_cluster

- name: Create etcd systemd service override directory
  file:
    path: /etc/systemd/system/etcd.service.d
    state: directory
    mode: '0755'
  become: yes
  when: etcd_cluster

- name: Configure systemd limits for etcd
  copy:
    content: |
      [Service]
      LimitNOFILE=1048576
      LimitNPROC=1048576
      LimitMEMLOCK=infinity
    dest: /etc/systemd/system/etcd.service.d/limits.conf
  become: yes
  when: etcd_cluster

- name: Stop etcd service if running
  systemd:
    name: etcd
    state: stopped
  become: yes
  when: etcd_cluster
  ignore_errors: yes

- name: Clean etcd data directory
  file:
    path: "{{ etcd_data_dir }}"
    state: absent
  become: yes
  when: etcd_cluster
  ignore_errors: yes

- name: Recreate etcd data directory
  file:
    path: "{{ etcd_data_dir }}"
    state: directory
    mode: '0700'
    owner: root
    group: root
  become: yes
  when: etcd_cluster

- name: Try to start etcd manually to see error details
  command: /usr/local/bin/etcd --config-file=/etc/etcd/etcd.conf.yaml
  register: etcd_manual_start
  become: yes
  when: etcd_cluster and inventory_hostname == groups['masters'][0]
  ignore_errors: yes
  async: 10
  poll: 0

- name: Wait a moment for etcd to start or fail
  pause:
    seconds: 5
  when: etcd_cluster and inventory_hostname == groups['masters'][0]

- name: Check etcd service logs
  command: journalctl -u etcd --no-pager -n 100
  register: etcd_logs
  changed_when: false
  ignore_errors: yes

- name: Display etcd service logs
  debug:
    msg: "{{ etcd_logs.stdout }}"
  when: etcd_logs.rc == 0

- name: Check etcd service status
  command: systemctl status etcd.service
  register: etcd_status
  changed_when: false
  ignore_errors: yes

- name: Display etcd service status
  debug:
    msg: "{{ etcd_status.stdout }}"
  when: etcd_status.rc != 0

- name: Try a simpler etcd configuration for testing
  copy:
    content: |
      name: {{ inventory_hostname }}
      data-dir: {{ etcd_data_dir }}
      listen-client-urls: http://127.0.0.1:2379
      advertise-client-urls: http://127.0.0.1:2379
      initial-advertise-peer-urls: http://{{ ansible_host }}:2380
      listen-peer-urls: http://{{ ansible_host }}:2380
      initial-cluster: {{ inventory_hostname }}=http://{{ ansible_host }}:2380
      initial-cluster-state: new
      initial-cluster-token: etcd-cluster-0
    dest: /etc/etcd/etcd-simple.conf.yaml
    mode: '0600'
  become: yes
  when: etcd_cluster

- name: Create a simplified etcd service file
  copy:
    content: |
      [Unit]
      Description=etcd
      Documentation=https://github.com/etcd-io/etcd
      After=network.target

      [Service]
      Type=notify
      ExecStart=/usr/local/bin/etcd --config-file=/etc/etcd/etcd-simple.conf.yaml
      Restart=always
      RestartSec=10s
      LimitNOFILE=1048576
      LimitNPROC=1048576
      LimitMEMLOCK=infinity

      [Install]
      WantedBy=multi-user.target
    dest: /etc/systemd/system/etcd-simple.service
    mode: '0644'
  become: yes
  when: etcd_cluster

- name: Reload systemd
  systemd:
    daemon_reload: yes
  become: yes
  when: etcd_cluster

- name: Start simplified etcd service
  systemd:
    name: etcd-simple
    enabled: yes
    state: restarted
  become: yes
  when: etcd_cluster
  register: etcd_simple_start
  failed_when: false

- name: Check simplified etcd service logs
  command: journalctl -u etcd-simple --no-pager -n 50
  register: etcd_simple_logs
  changed_when: false
  ignore_errors: yes

- name: Display simplified etcd service logs
  debug:
    msg: "{{ etcd_simple_logs.stdout }}"
  when: etcd_simple_logs.rc == 0

- name: Check if simplified etcd is listening on port 2379 using ss
  command: ss -tlnp | grep 2379
  register: etcd_simple_port_check
  changed_when: false
  ignore_errors: yes

- name: Display simplified etcd port status
  debug:
    msg: "{{ etcd_simple_port_check.stdout }}"
  when: etcd_simple_port_check.rc == 0

- name: Try simple etcd health check without TLS
  command: etcdctl --endpoints=http://127.0.0.1:2379 endpoint health
  register: etcd_health_simple
  changed_when: false
  ignore_errors: yes

- name: Display simple etcd health check result
  debug:
    msg: "{{ etcd_health_simple.stdout }} {{ etcd_health_simple.stderr }}"
  when: etcd_health_simple.rc == 0
- name: Terminate all active connections to target DB
  community.postgresql.postgresql_query:
    login_host: "{{ target.host }}"
    login_port: "{{ target.port }}"
    login_user: "{{ target.user }}"
    login_password: "{{ target.password }}"
    login_db: postgres
    query: >
      SELECT pg_terminate_backend(pid)
      FROM pg_stat_activity
      WHERE datname = '{{ target.name }}'
        AND pid <> pg_backend_pid();
  register: terminate_result

- name: Show number of terminated sessions
  debug:
    msg: "Terminated {{ terminate_result.rowcount }} sessions for database {{ target.name }}"

- name: Drop target PostgreSQL database
  community.postgresql.postgresql_db:
    login_host: "{{ target.host }}"
    login_port: "{{ target.port }}"
    login_user: "{{ target.user }}"
    login_password: "{{ target.password }}"
    name: "{{ target.name }}"
    state: absent
    force: true 

- name: Create target PostgreSQL database
  community.postgresql.postgresql_db:
    login_host: "{{ target.host }}"
    login_port: "{{ target.port }}"
    login_user: "{{ target.user }}"
    login_password: "{{ target.password }}"
    name: "{{ target.name }}"
    owner: "{{ target.user }}"
    encoding: 'UTF8'
    state: present


#if not work upper then use raw

# - name: Drop target database if it exists using SQL
#   community.postgresql.postgresql_query:
#     login_host: "{{ target.host }}"
#     port: "{{ target.port }}"
#     login_user: "{{ target.user }}"
#     login_password: "{{ target.password }}"
#     login_db: postgres
#     query: "DROP DATABASE IF EXISTS {{ target.name }};"
#   become: true
#   become_user: postgres

# - name: Create target PostgreSQL database via SQL
#   community.postgresql.postgresql_query:
#     login_host: "{{ target.host }}"
#     port: "{{ target.port }}"
#     login_user: "{{ target.user }}"
#     login_password: "{{ target.password }}"
#     login_db: postgres
#     query: "CREATE DATABASE {{ target.name }};"
#   become: true
#   become_user: postgres
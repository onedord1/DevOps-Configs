- name: Create Proxmox User
  command: "pveum user add {{ terraform_user }}@{{ terraform_realm }} --comment 'Terraform User'"
  ignore_errors: yes

- name: Create Proxmox Role
  command: "pveum role add {{ terraform_role }} -privs '{{ terraform_privs }}'"
  ignore_errors: yes

- name: Assign Role to User
  command: "pveum acl modify / --user {{ terraform_user }}@{{ terraform_realm }} --roles {{ terraform_role }}"
  ignore_errors: yes

- name: Check if token exists
  command: "pveum user token list {{ terraform_user }}@{{ terraform_realm }} --output-format json"
  register: token_list_result
  changed_when: false

- name: Delete existing token if it exists
  command: "pveum user token remove {{ terraform_user }}@{{ terraform_realm }} {{ terraform_token_name }}"
  when: token_list_result.stdout | from_json | selectattr('tokenid', 'equalto', terraform_token_name) | list | count > 0

- name: Create new Proxmox API Token
  command: "pveum user token add {{ terraform_user }}@{{ terraform_realm }} {{ terraform_token_name }} --privsep 0"
  register: token_creation_result

- name: Debug token creation output
  debug:
    var: token_creation_result.stdout
  when: token_creation_result.changed

- name: Extract token value using regex
  set_fact:
    token_value: "{{ token_creation_result.stdout | regex_search('value[â”‚\\s]*([a-f0-9-]+)', '\\1') | first }}"
  when: token_creation_result.changed

- name: Create token info dictionary
  set_fact:
    token_info: {
      "user": "{{ terraform_user }}@{{ terraform_realm }}",
      "token_id": "{{ terraform_token_name }}",
      "full_token_id": "{{ terraform_user }}@{{ terraform_realm }}!{{ terraform_token_name }}",
      "token_value": "{{ token_value }}"
    }
  when: token_creation_result.changed

- name: Save token info to JSON file on localhost
  ansible.builtin.copy:
    content: "{{ token_info | to_json }}"
    dest: "./{{ terraform_token_name }}_token_output.json"
  delegate_to: localhost
  when: token_creation_result.changed
  become: no
stages:
  - sonar
  - build
  - deploy
  - trigger_argo

sonarqube-report:
  image:
    name: registry.cloudaes.com/base-images/sonar-node20:v2
  stage: sonar
  allow_failure: true
  script:
    - npm i
    - npx vitest run --coverage
    - sonar-scanner -Dsonar.login=$sonar_token -Dsonar.qualitygate.wait=true
  tags:
    - prod
image-build:
  stage: build
  image: docker:24.0.5-cli
  services:
    - docker:24.0.5-dind
  variables:
    TZ: "Asia/Dhaka"
    LC_TIME: "en_US.UTF-8"
  before_script:
    - apk add --no-cache tzdata git libc6-compat curl bash
    - ln -sf /usr/share/zoneinfo/$TZ /etc/localtime
    - echo "$TZ" > /etc/timezone
  script:
    - |
      /bin/bash <<'EOF'
        set -x
        set -e
        send_notification() {
          local payload="{\"text\": \"[$CI_PROJECT_NAME][$CI_COMMIT_REF_NAME][$1] $2 - Job: $CI_JOB_NAME, Tag: ${IMAGE_TAG:-empty}\"}"
          curl -s -X POST -H "Content-Type: application/json" -d "$payload" "$GOOGLE_CHAT_WEBHOOK_URL" || echo "Failed to send notification"
        }
        echo "Starting Docker build...";
        IMAGE_NAME="registry.cloudaes.com/bmd-sales-fe/bmd-sales-fe_prod";
        IMAGE_TAG="$(date +'%d%b-%H-%M')-$(git rev-parse --short HEAD || echo failed)";
        export IMAGE_NAME IMAGE_TAG CI_JOB_NAME GOOGLE_CHAT_WEBHOOK_URL;
        echo "Debug: IMAGE_NAME=$IMAGE_NAME, IMAGE_TAG=$IMAGE_TAG, CI_JOB_NAME=$CI_JOB_NAME";
        [ -n "$IMAGE_TAG" ] && [ "$IMAGE_TAG" != "-" ] || { echo "Error: Invalid IMAGE_TAG"; send_notification "FE Build Failure" "Back to the drawing board"; exit 1; };
        echo "$harborpass" | docker login registry.cloudaes.com -u "$harboruser" --password-stdin || { send_notification "Build Failure" "Who are you scammer! 😱 - Docker login failed"; exit 1; }
        docker build --no-cache --build-arg BRANCH=$CI_COMMIT_REF_NAME --build-arg NEXUS_AUTH_TOKEN="$NEXUS_AUTH_TOKEN" -t "$IMAGE_NAME:$IMAGE_TAG" . || { send_notification "FE Build Failure" "Who broke the build?"; exit 1; };
        docker tag "$IMAGE_NAME:$IMAGE_TAG" "$IMAGE_NAME:latest" || { send_notification "FE Build Failure" "Tagging failed"; exit 1; };
        docker push "$IMAGE_NAME:$IMAGE_TAG" || { send_notification "FE Build Failure" "Push failed"; exit 1; };
        docker push "$IMAGE_NAME:latest" || { send_notification "FE Build Failure" "Push failed for latest"; exit 1; };
        docker rmi "$IMAGE_NAME:$IMAGE_TAG" "$IMAGE_NAME:latest" || echo "Warning: Failed to remove images";
        echo "IMAGE_TAG=$IMAGE_TAG" >> .env || { echo "Error: Failed to write .env"; send_notification "FE Build Failure" "Failed to write pipeline .env"; exit 1; };
        cat .env || { echo "Error: Failed to read .env"; send_notification "FE Build Failure" "Failed to read pipeline .env"; exit 1; };
  artifacts:
    paths:
      - .env
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  tags:
    - prod
update-manifest:
  stage: deploy
  image: bitnami/git:latest
  before_script:
    - apt-get update && apt-get install -y curl bash
    - git config --global http.sslVerify false
    - git config --global user.email "devops@quickops.io"
    - git config --global user.name "GitLab CI"
  script:
    - |
      /bin/bash <<'EOF'
        set -x
        set -e
        send_notification() {
          local payload="{\"text\": \"[$CI_PROJECT_NAME][$CI_COMMIT_REF_NAME][$1] $2 - Job: $CI_JOB_NAME, Tag: ${IMAGE_TAG:-empty}\"}"
          curl -s -X POST -H "Content-Type: application/json" -d "$payload" "$GOOGLE_CHAT_WEBHOOK_URL" || echo "Failed to send notification"
        }
        source .env || echo "Error: Failed to source .env";
        echo "Debug: IMAGE_TAG=$IMAGE_TAG, CI_JOB_NAME=$CI_JOB_NAME";
        export IMAGE_TAG;
        [ -n "$IMAGE_TAG" ] || { echo "Error: IMAGE_TAG is empty"; send_notification "FE Deploy Failure" "Something's fishy 🐟"; exit 1; };
        git clone --branch main "https://${gituser}:${gitpass}@172.17.19.247/devops/bmd-manifests.git" || { send_notification "FE Deploy Failure" "We have a problem 🛑 - Git clone failed"; exit 1; };
        cd bmd-manifests;
        ls -l k8s/5.frontend.yaml || { echo "Error: Manifest file not found"; send_notification "FE Deploy Failure" "Deployment crash 🙈 - Manifest file not found"; exit 1; };
        sed -i "s|image: registry.cloudaes.com/bmd-sales-fe/bmd-sales-fe_prod:.*|image: registry.cloudaes.com/bmd-sales-fe/bmd-sales-fe_prod:${IMAGE_TAG}|" k8s/5.frontend.yaml || { send_notification "FE Deploy Failure" "Deployment crash 🙈 - Manifest update failed"; exit 1; };
        cat k8s/5.frontend.yaml || echo "Error: Failed to read manifest";
        git add k8s/5.frontend.yaml || { send_notification "FE Deploy Failure" "Rollback time 🔁 - Git add failed"; exit 1; };
        git commit -m "Update frontend image to ${IMAGE_TAG}" || { send_notification "FE Deploy Failure" "Rollback time 🔁 - Git commit failed"; exit 1; };
        git push origin main || { send_notification "Deploy Failure" "Uh oh, something broke! 🔨 - Git push failed"; exit 1; };
        send_notification "Pipeline Success" "Please wait 30s! Triggering ArgoCD 🎉";
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  tags:
    - prod
    
trigger_argo:
  image: registry.cloudaes.com/base-images/argocli:v2.6.15
  stage: trigger_argo
  script:
    - APP="bmdsales-main-ns"
    - argocd login $main_argo_url --username $argo_user --password $argo_pass --insecure
    - argocd app sync $APP
    - argocd app wait $APP
  tags:
    - prod

stages:
  - build
  - sonar
  - deploy
  - trigger_argo

image-build:
  stage: build
  resource_group: dev
  image: registry.cloudaes.com/base-images/aes-docker:24.0.5-cli
  services:
    - docker:24.0.5-dind
  script:
    - |
      /bin/bash <<'EOF'
        set -x
        set -e
        send_notification() {
          local payload="{\"text\": \"[$CI_PROJECT_NAME][$CI_COMMIT_REF_NAME][$1] $2 - Job: $CI_JOB_NAME, Tag: ${IMAGE_TAG:-empty}\"}"
          curl -s -X POST -H "Content-Type: application/json" -d "$payload" "$GOOGLE_CHAT_WEBHOOK_URL" || echo "Failed to send notification"
        }
        echo "Starting Docker build...";
        IMAGE_NAME="registry.cloudaes.com/bmd-sales-fe/bmd-sales-fe";
        IMAGE_TAG="$(date +'%d%b')-$CI_MERGE_REQUEST_IID";
        export IMAGE_NAME IMAGE_TAG CI_JOB_NAME GOOGLE_CHAT_WEBHOOK_URL;
        echo "Debug: IMAGE_NAME=$IMAGE_NAME, IMAGE_TAG=$IMAGE_TAG, CI_JOB_NAME=$CI_JOB_NAME";
        [ -n "$IMAGE_TAG" ] && [ "$IMAGE_TAG" != "-" ] || { echo "Error: Invalid IMAGE_TAG"; send_notification "FE Build Failure" "Back to the drawing board"; exit 1; };
        echo "$harborpass" | docker login registry.cloudaes.com -u "$harboruser" --password-stdin || { send_notification "Build Failure" "Who are you scammer! 😱 - Docker login failed"; exit 1; }
        docker build --no-cache --progress=plain --build-arg VITE_SALES_API_URL="$VITE_SALES_API_URL_DEV" --build-arg VITE_OTEL_EXPORTER_OTLP_ENDPOINT="http://localhost" --build-arg VITE_OTEL_SERVICE_NAME="dev-bmdsales-fe" --build-arg SIGNOZ_USERNAME="dev" --build-arg SIGNOZ_PASSWORD="dev" --build-arg NEXUS_AUTH_TOKEN="$NEXUS_AUTH_TOKEN" -t "$IMAGE_NAME:$IMAGE_TAG" . || { send_notification "FE Build Failure" "Who broke the build?"; exit 1; };
        docker tag "$IMAGE_NAME:$IMAGE_TAG" "$IMAGE_NAME:latest" || { send_notification "FE Build Failure" "Tagging failed"; exit 1; };
        docker push "$IMAGE_NAME:$IMAGE_TAG" || { send_notification "FE Build Failure" "Push failed"; exit 1; };
        docker push "$IMAGE_NAME:latest" || { send_notification "FE Build Failure" "Push failed for latest"; exit 1; };
        docker rmi "$IMAGE_NAME:$IMAGE_TAG" "$IMAGE_NAME:latest" || echo "Warning: Failed to remove images";
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_APPROVED != "true"'
      when: always
    - when: never
  tags:
    - dev

sonarqube-report:
  image:
    name: registry.cloudaes.com/base-images/sonar-node20:v2
  stage: sonar
  needs:
  - job: image-build
  resource_group: dev
  allow_failure: true
  script:
    - npm i
    - npx vitest run --coverage
    - export SONAR_PROJECT_KEY=bmd-sales-fe-dev
    - export SONAR_PROJECT_NAME="BMD Sales Frontend Dev"
    - sonar-scanner -Dsonar.login=$sonar_token -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.projectName="$SONAR_PROJECT_NAME" -Dsonar.qualitygate.wait=true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_APPROVED != "true"'
      when: on_success
    - when: never
  tags:
    - dev

update-manifest:
  stage: deploy
  image: registry.cloudaes.com/base-images/aes-git:v1.0.2
  resource_group: dev
  script:
    - |
      /bin/bash <<'EOF'
        set -x
        set -e
        send_notification() {
          local payload="{\"text\": \"[$CI_PROJECT_NAME][$CI_COMMIT_REF_NAME][$1] $2 - Job: $CI_JOB_NAME, Tag: ${IMAGE_TAG:-empty}\"}"
          curl -s -X POST -H "Content-Type: application/json" -d "$payload" "$GOOGLE_CHAT_WEBHOOK_URL" || echo "Failed to send notification"
        }
        MR_IID=$(git log -1 --pretty=%B | grep -oP 'See merge request .*!\K\d+');
        IMAGE_TAG="$(date +'%d%b')-$MR_IID";
        echo "Debug: IMAGE_TAG=$IMAGE_TAG, CI_JOB_NAME=$CI_JOB_NAME";
        export IMAGE_TAG;
        [ -n "$IMAGE_TAG" ] || { echo "Error: IMAGE_TAG is empty"; send_notification "FE Deploy Failure" "Something's fishy 🐟"; exit 1; };
        git clone --branch dev "https://${gituser}:${gitpass}@172.17.19.247/devops/bmd-manifests.git" || { send_notification "FE Deploy Failure" "We have a problem 🛑 - Git clone failed"; exit 1; };
        cd bmd-manifests;
        ls -l k8s/5.frontend.yaml || { echo "Error: Manifest file not found"; send_notification "FE Deploy Failure" "Deployment crash 🙈 - Manifest file not found"; exit 1; };
        sed -i "s|image: registry.cloudaes.com/bmd-sales-fe/bmd-sales-fe:.*|image: registry.cloudaes.com/bmd-sales-fe/bmd-sales-fe:${IMAGE_TAG}|" k8s/5.frontend.yaml || { send_notification "FE Deploy Failure" "Deployment crash 🙈 - Manifest update failed"; exit 1; };
        cat k8s/5.frontend.yaml || echo "Error: Failed to read manifest";
        git add k8s/5.frontend.yaml || { send_notification "FE Deploy Failure" "Rollback time 🔁 - Git add failed"; exit 1; };
        git commit -m "Update frontend image to ${IMAGE_TAG}" || { send_notification "FE Deploy Failure" "Rollback time 🔁 - Git commit failed"; exit 1; };
        git push origin dev || { send_notification "Deploy Failure" "Uh oh, something broke! 🔨 - Git push failed"; exit 1; };
        send_notification "Pipeline Success" "Please wait 30s! Triggering ArgoCD 🎉";
      EOF
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "dev"'
      when: always
    - when: never
  tags:
    - dev
    
trigger_argo:
  image: registry.cloudaes.com/base-images/argocli:v2.6.15
  stage: trigger_argo
  needs:
    - update-manifest
  resource_group: dev
  script:
    - APP="bmdsales-dev-ns"
    - argocd login $dev_argo_url --username $argo_user --password $argo_pass --insecure
    - argocd app sync $APP
    - argocd app wait $APP
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "dev"'
      when: on_success
    - when: never
  tags:
    - dev

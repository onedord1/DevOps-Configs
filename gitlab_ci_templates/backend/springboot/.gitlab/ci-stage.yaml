stages:
  - sonar
  - build
  - deploy
  - trigger_argo

sonarqube-analysis:
  image: registry.cloudaes.com/base-images/maven:3.8-openjdk-17
  resource_group: stage
  stage: sonar
  allow_failure: true
  variables:
    MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  script:
    - mvn clean install -DskipTests=true sonar:sonar -Dsonar.projectKey=ail_sales_be -Dsonar.projectName=ail_sales_be -Dsonar.host.url=$SONAR_URL -Dsonar.token=$SONAR_TOKEN
  
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_APPROVED != "true"'
      when: always
    - when: never
  cache:
    paths:
      - .m2/repository
  tags:
    - dev

image-build:
  stage: build
  image: registry.cloudaes.com/base-images/docker:24.0.5-cli
  resource_group: stage
  needs:
    - sonarqube-analysis
  services:
    - docker:24.0.5-dind
  variables:
    TZ: "Asia/Dhaka"
    LC_TIME: "en_US.UTF-8"
  before_script:
    - apk add --no-cache tzdata git libc6-compat curl bash
    - ln -sf /usr/share/zoneinfo/$TZ /etc/localtime
    - echo "$TZ" > /etc/timezone
  script:
    - |
      /bin/bash <<'EOF'
        set -x
        set -e
        send_notification() {
          local payload="{\"text\": \"[$CI_PROJECT_NAME][$CI_COMMIT_REF_NAME][$1] $2 - Job: $CI_JOB_NAME, Tag: ${IMAGE_TAG:-empty}\"}"
          curl -s -X POST -H "Content-Type: application/json" -d "$payload" "$GOOGLE_CHAT_WEBHOOK_URL" || echo "Failed to send notification"
        }
        echo "Starting Docker build...";
        ACL_IMAGE_NAME="registry.cloudaes.com/anwar-cement-sales/anwar-cement-spring";
        AIL_IMAGE_NAME="registry.cloudaes.com/anwar-ispat-sales/anwar-ispat-spring";
        IMAGE_TAG="$(date +'%d%b')-$CI_MERGE_REQUEST_IID";
        export ACL_IMAGE_NAME AIL_IMAGE_NAME IMAGE_TAG CI_JOB_NAME GOOGLE_CHAT_WEBHOOK_URL;
        echo IMAGE_TAG=$IMAGE_TAG;
        echo "$harborpass" | docker login registry.cloudaes.com -u "$harboruser" --password-stdin || { send_notification "BE Build Failure" "Registry Login Failed😱"; exit 1; }
        docker build --no-cache --build-arg BRANCH=stage --build-arg NEXUS_USER=$NEXUS_USER --build-arg NEXUS_PASS=$NEXUS_PASS -t "$ACL_IMAGE_NAME:$IMAGE_TAG" . || { send_notification "BE Build Failure" "Who broke the build?"; exit 1; };
        docker tag "$ACL_IMAGE_NAME:$IMAGE_TAG" "$ACL_IMAGE_NAME:latest" || { send_notification "FE Build Failure" "Tagging failed"; exit 1; };
        docker push "$ACL_IMAGE_NAME:$IMAGE_TAG" || { send_notification "BE Build Failure" "Image Push failed"; exit 1; };
        docker push "$ACL_IMAGE_NAME:latest" || { send_notification "BE Build Failure" "Image Push failed for latest"; exit 1; };
        docker tag "$ACL_IMAGE_NAME:$IMAGE_TAG" "$AIL_IMAGE_NAME:$IMAGE_TAG" || { send_notification "FE Build Failure" "Tagging failed"; exit 1; };
        docker tag "$AIL_IMAGE_NAME:$IMAGE_TAG" "$AIL_IMAGE_NAME:latest" || { send_notification "FE Build Failure" "Tagging failed"; exit 1; };
        docker push "$AIL_IMAGE_NAME:$IMAGE_TAG" || { send_notification "BE Build Failure" "Image Push failed"; exit 1; };
        docker push "$AIL_IMAGE_NAME:latest" || { send_notification "BE Build Failure" "Image Push failed for latest"; exit 1; };
        docker rmi "$ACL_IMAGE_NAME:$IMAGE_TAG" "$ACL_IMAGE_NAME:latest" || echo "Warning: Failed to remove ACLimages";
        docker rmi "$AIL_IMAGE_NAME:$IMAGE_TAG" "$AIL_IMAGE_NAME:latest" || echo "Warning: Failed to remove AILimages";
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_APPROVED != "true"'
      when: always
    - when: never
  tags:
    - dev

acl-update-manifest:
  stage: deploy
  image: registry.cloudaes.com/base-images/bitnami/git:latest
  resource_group: stage
  variables:
    TZ: "Asia/Dhaka"
    LC_TIME: "en_US.UTF-8"
  before_script:
    - apt-get update && apt-get install -y curl bash tzdata
    - ln -sf /usr/share/zoneinfo/$TZ /etc/localtime
    - echo "$TZ" > /etc/timezone
    - git config --global http.sslVerify false
    - git config --global user.email "devops@quickops.io"
    - git config --global user.name "GitLab CI"
  script:
    - |
      /bin/bash <<'EOF'
        set -x
        set -e
        send_notification() {
          local payload="{\"text\": \"[$CI_PROJECT_NAME][$CI_COMMIT_REF_NAME][$1] $2 - Job: $CI_JOB_NAME, Tag: ${IMAGE_TAG:-empty}\"}"
          curl -s -X POST -H "Content-Type: application/json" -d "$payload" "$GOOGLE_CHAT_WEBHOOK_URL" || echo "Failed to send notification"
        }
        MR_IID=$(git log -1 --pretty=%B | grep -oP 'See merge request .*!\K\d+');
        IMAGE_TAG="$(date +'%d%b')-$MR_IID";
        echo "Debug: IMAGE_TAG=$IMAGE_TAG, CI_JOB_NAME=$CI_JOB_NAME";
        export IMAGE_TAG;
        [ -n "$IMAGE_TAG" ] || { echo "Error: IMAGE_TAG is empty"; send_notification "BE Deploy Failure" "Something's fishy 🐟"; exit 1; };
        git clone --branch dev "https://${gituser}:${gitpass}@172.17.19.247/devops/corteza-manifests.git" || { send_notification "BE Deploy Failure" "We have a problem 🛑 - Git clone failed"; exit 1; };
        cd corteza-manifests/acl;
        ls -l k8s/6-springboot-deployment.yaml || { echo "Error: Manifest file not found"; send_notification "BE Deploy Failure" "Deployment crash 🙈 - Manifest file not found"; exit 1; };
        sed -i "s|image: registry.cloudaes.com/anwar-cement-sales/anwar-cement-spring:.*|image: registry.cloudaes.com/anwar-cement-sales/anwar-cement-spring:${IMAGE_TAG}|" k8s/6-springboot-deployment.yaml || { send_notification "BE Deploy Failure" "Deployment crash 🙈 - Manifest update failed"; exit 1; };
        cat k8s/6-springboot-deployment.yaml || echo "Error: Failed to read manifest";
        git add k8s/6-springboot-deployment.yaml || { send_notification "BE Deploy Failure" "Rollback time 🔁 - Git add failed"; exit 1; };
        git commit -m "Update backend image to ${IMAGE_TAG}" || { send_notification "BE Deploy Failure" "Rollback time 🔁 - Git commit failed"; exit 1; };
        git push origin dev || { send_notification "Deploy Failure" "Uh oh, something broke! 🔨 - Git push failed"; exit 1; };
        send_notification "Pipeline Success" "Please Wait 30s! Triggering ArgoCD 🎉";
      EOF
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "stage"'
      when: always
    - when: never
  tags:
    - dev

ail-update-manifest:
  stage: deploy
  image: registry.cloudaes.com/base-images/bitnami/git:latest
  resource_group: stage
  variables:
    TZ: "Asia/Dhaka"
    LC_TIME: "en_US.UTF-8"
  before_script:
    - apt-get update && apt-get install -y curl bash tzdata
    - ln -sf /usr/share/zoneinfo/$TZ /etc/localtime
    - echo "$TZ" > /etc/timezone
    - git config --global http.sslVerify false
    - git config --global user.email "devops@quickops.io"
    - git config --global user.name "GitLab CI"
  script:
    - |
      /bin/bash <<'EOF'
        set -x
        set -e
        send_notification() {
          local payload="{\"text\": \"[$CI_PROJECT_NAME][$CI_COMMIT_REF_NAME][$1] $2 - Job: $CI_JOB_NAME, Tag: ${IMAGE_TAG:-empty}\"}"
          curl -s -X POST -H "Content-Type: application/json" -d "$payload" "$GOOGLE_CHAT_WEBHOOK_URL" || echo "Failed to send notification"
        }
        MR_IID=$(git log -1 --pretty=%B | grep -oP 'See merge request .*!\K\d+');
        IMAGE_TAG="$(date +'%d%b')-$MR_IID";
        echo "Debug: IMAGE_TAG=$IMAGE_TAG, CI_JOB_NAME=$CI_JOB_NAME";
        export IMAGE_TAG;
        [ -n "$IMAGE_TAG" ] || { echo "Error: IMAGE_TAG is empty"; send_notification "BE Deploy Failure" "Something's fishy 🐟"; exit 1; };
        git clone --branch dev "https://${gituser}:${gitpass}@172.17.19.247/devops/corteza-manifests.git" || { send_notification "BE Deploy Failure" "We have a problem 🛑 - Git clone failed"; exit 1; };
        cd corteza-manifests/ail;
        ls -l k8s/6-springboot-deployment.yaml || { echo "Error: Manifest file not found"; send_notification "BE Deploy Failure" "Deployment crash 🙈 - Manifest file not found"; exit 1; };
        sed -i "s|image: registry.cloudaes.com/anwar-ispat-sales/anwar-ispat-spring:.*|image: registry.cloudaes.com/anwar-ispat-sales/anwar-ispat-spring:${IMAGE_TAG}|" k8s/6-springboot-deployment.yaml || { send_notification "BE Deploy Failure" "Deployment crash 🙈 - Manifest update failed"; exit 1; };
        cat k8s/6-springboot-deployment.yaml || echo "Error: Failed to read manifest";
        git add k8s/6-springboot-deployment.yaml || { send_notification "BE Deploy Failure" "Rollback time 🔁 - Git add failed"; exit 1; };
        git commit -m "Update backend image to ${IMAGE_TAG}" || { send_notification "BE Deploy Failure" "Rollback time 🔁 - Git commit failed"; exit 1; };
        git push origin dev || { send_notification "Deploy Failure" "Uh oh, something broke! 🔨 - Git push failed"; exit 1; };
        send_notification "Pipeline Success" "Please Wait 30s! Triggering ArgoCD 🎉";
      EOF
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "stage"'
      when: always
    - when: never
  tags:
    - dev


acl_trigger_argo:
  image: registry.cloudaes.com/base-images/argocli:v2.6.15
  needs:
    - acl-update-manifest
  resource_group: stage
  stage: trigger_argo
  script:
    - APP="anwar-cement-dev-ns"
    - argocd login $dev_argo_url --username $argo_user --password $argo_pass --insecure
    - argocd app sync $APP
    - argocd app wait $APP
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "stage"'
      when: always
    - when: never
  tags:
    - dev

ail_trigger_argo:
  image: registry.cloudaes.com/base-images/argocli:v2.6.15
  needs:
    - ail-update-manifest
  resource_group: stage
  stage: trigger_argo
  script:
    - APP="anwar-ispat-dev-ns"
    - argocd login $dev_argo_url --username $argo_user --password $argo_pass --insecure
    - argocd app sync $APP
    - argocd app wait $APP
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "stage"'
      when: always
    - when: never
  tags:
    - dev
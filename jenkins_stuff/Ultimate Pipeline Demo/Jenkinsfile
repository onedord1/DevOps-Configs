pipeline {
    agent any

    tools {
    //if use any specific tools
    //jdk 'jdk17'
    //maven 'maven3'
    }

    environment {
        SCANNER_HOME = tool 'sonnar-scanner'
    }

    stages {
        stage('Git Checkout') {
            steps {
               git branch 'main', credentialsId: 'git-cred', url: 'https://github.com/<username>/<repo>/'
            }
        }
        stage('Compile') {
            steps {
            //sh 'maven compile'
            //this is just demo change according to your needs
            }
        }
        stage('Test') {
            steps {
            //sh 'mvn test'
            //demo change according to your needs
            }
        }
        stage('Trivy FileSytem Scan') {
            steps {
                sh 'trivy fs --format table -o fs.html .'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=<your_project_name> -Dsonar.projectKey=<project_name> \
                          -Dsonar.java.binaries=target'''
                }
            }
        }
        stage('Build') {
            steps {
            //sh 'mvn package'
            //sh 'npm run build'
            }
        }
        stage('Publish Artifact') {
            steps {
                withMaven(globalMavenSettingsConfig: '<provide ID thats come from settings xml file>', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig:'', traceability: true){
                //sh 'npm run publish'
                //sh 'maven deploy'
                }
            }
        }
        stage('Docker Build & Tag') {
            steps {
                script {
                    /* groovylint-disable-next-line NestedBlockDepth */
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh 'docker build -t <username>/<project_name>:<tag_name> <location>'
                    }
                }
            }
        }
        stage('Trivy Image Scan') {
            steps {
                sh 'trivy image --format table -o image.html <username>/<project_name>:<tag_name>'
            }
        }
        stage('Docker Push Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh 'docker push <username>/<project_name>:<tag_name>'
                    }
                }
            }
        }
        stage('K8s Deploy') {
            steps {
                withKubeConfig(caCertificate:'', clusterName: '<cluster_name', contextName: '', credentialsId: 'k8-cred', namespace: 'namespace_name', restrictKubeConfigAccess: false, serverUrl: '<cluster_endpoints>') {
                    sh 'kubectl apply -f <manifest_file_locations>'
                    sleep 20
                }
            }
        }
    }

post {
    always {
        script {
        def jobName - env.JOB_NAME
        def buildNumber - env.BUILD_NUMBER
        def pipelineStatus currentBuild.result?: "UNKNOWN"
        def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'
        def body = """
            <html>
            <body>
            <div style="border: 4px solid ${bannerColor}; padding: 10px;"> 
            <h2>${jobName} - Build ${build Number}</h2>
            <div style="background-color: ${bannerColor}; padding: 10px;">
            <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3> 
            </div>
            <p>Check the <a href="${BUILD_URL}">console output</a>.</p>
            </div>
            </body> 
            </html>
        """
        emailext (
            subject: "${jobName} - Build $(buildNumber} - ${pipelineStatus.toUpperCase()}", 
            body: body,
            to: 'test@gmail.com', 
            from: 'jenkins@example.com', 
            replyTo: 'jenkins@example.com', 
            mimeType: 'text/html',
        )
        }
    }
}
}


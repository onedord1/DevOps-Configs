//Docs & Explanation can be found at config-yaml repository
pipeline {
    agent any
    environment {

        //------------ D O C K E R -----------------------------
        IMAGE_URL = "registry.anwarlabs.com/erp-frontend/fe-image"
        REG_URL = "registry.anwarlabs.com"
        REG_CRED_ID = "private-hub"


        //-------------- G I T -------------------------------
        GIT_BRANCH = "main"
        GIT_URL = "https://gitlab.com/aes-erp/frontend.git"
        GIT_CRED_ID = "aes-git-lab"


        //-------------- T a g ------------------------------
        // TAG = """${sh(
        //         returnStdout: true,
        //         script: 'git rev-parse --short HEAD'
        //     )}"""
        MAJOR_VERSION = "1"
        MINOR_VERSION = "$BUILD_NUMBER"
        TAG = "${MAJOR_VERSION}.${MINOR_VERSION}"
    }

    stages {
        stage('CLEANUP WORKSPACE'){
            steps{
                script{
                    cleanWs()
                }
            }
        }
        stage('Git Clone') {
            steps {
                git branch: GIT_BRANCH, credentialsId: GIT_CRED_ID, url: GIT_URL
            }
        }
        stage('Docker Build') {
            steps {
                sh "docker build -t  ${IMAGE_URL}:${TAG} ."
            }
        }
        stage('Docker  Login + Push ') {
            steps {
                // Login Snippet Generated By withCredentials At Jenkins UI
                withCredentials([usernamePassword(credentialsId: 'private-hub', passwordVariable: 'PASSWORD', usernameVariable: 'USER_NAME')]) {
                    sh "echo ${PASSWORD} | docker login ${REG_URL} --username ${USER_NAME} --password-stdin"
                    sh "docker push ${IMAGE_URL}:${TAG}"
                }
            }
        }
        stage('Docker Logout + Clean Docker Image') {
            steps {
                    sh "docker logout ${DOCKER_REGISTRY}"
                    sh "docker rmi ${IMAGE_URL}:${TAG}"
                }
            }
        }
    post{
        success {
            hangoutsNotify(
            message: "PIPELINE: $env.JOB_NAME has completed SUCCESSFULLY.<br>BUILD NUMBER: $env.BUILD_NUMBER<br>BUILD TAG: $env.TAG<br>DOCKER_IMAGE: $env.IMAGE_URL:$env.TAG",
            threadByJob: true,
            )
        }
        failure {
            hangoutsNotify(
            message: "WARNING!<br>PIPELINE: $env.JOB_NAME has been FAILED!!.<br>BUILD NUMBER: $env.BUILD_NUMBER<br>BUILD TAG: $env.TAG<br>",
            threadByJob: true,
            )
        }
    }
}
